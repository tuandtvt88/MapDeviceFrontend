// ‚úÖ GET - L·∫•y danh s√°ch WiFi KTX Dom B
app.get("/api/ktxdomb", async (req, res) => {
  try {
    const result = await sql.query("SELECT * FROM ktxdomb");
    console.log("üîç D·ªØ li·ªáu l·∫•y t·ª´ SQL:", result.recordset);
    res.json(result.recordset);
  } catch (error) {
    console.error("‚ùå L·ªói truy v·∫•n SQL:", error);
    res.status(500).json({ error: "L·ªói truy v·∫•n SQL Server", details: error.message });
  }
});

// ‚úÖ POST - Th√™m WiFi m·ªõi KTX Dom B
app.post("/api/ktxdomb", async (req, res) => {
  const { name, topPosition, leftPosition } = req.body;

  try {
    const request = new sql.Request();
    const result = await request
      .input("name", sql.NVarChar, name)
      .input("topPosition", sql.VarChar, topPosition)
      .input("leftPosition", sql.VarChar, leftPosition)
      .query(`
        INSERT INTO ktxdomb (Name, TopPosition, LeftPosition)
        OUTPUT INSERTED.*
        VALUES (@name, @topPosition, @leftPosition)
      `);

    const insertedWifi = result.recordset[0];

    res.status(201).json({ message: "‚úÖ Th√™m WiFi th√†nh c√¥ng", wifi: insertedWifi });
  } catch (err) {
    console.error("‚ùå L·ªói th√™m WiFi:", err);
    res.status(500).json({ error: "L·ªói khi th√™m WiFi v√†o c∆° s·ªü d·ªØ li·ªáu" });
  }
});

// ‚úÖ PUT - C·∫≠p nh·∫≠t WiFi KTX Dom B(T√™n + v·ªã tr√≠)
app.put("/api/ktxdomb/:id", async (req, res) => {
  const { id } = req.params;
  const { name, topPosition, leftPosition } = req.body;

  try {
    const request = new sql.Request();
    await request
      .input("id", sql.Int, parseInt(id))
      .input("name", sql.NVarChar, name)
      .input("topPosition", sql.VarChar, topPosition)
      .input("leftPosition", sql.VarChar, leftPosition)
      .query(`
        UPDATE ktxdomb
        SET 
          name = @name,
          topPosition = @topPosition,
          leftPosition = @leftPosition
        WHERE id = @id
      `);

    res.send("‚úÖ ƒê√£ c·∫≠p nh·∫≠t WiFi (t√™n + v·ªã tr√≠) th√†nh c√¥ng");
  } catch (error) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t WiFi:", error);
    res.status(500).json({ error: "L·ªói c·∫≠p nh·∫≠t WiFi", details: error.message });
  }
});

//Ch·ª©c nƒÉng x√≥a wifi KTX Dom B
app.delete("/api/ktxdomb/:id", async (req, res) => {
  const { id } = req.params;

  try {
    const request = new sql.Request();
    const result = await request
      .input("id", sql.Int, parseInt(id))
      .query("DELETE FROM ktxdomb WHERE id = @id");

    if (result.rowsAffected[0] === 0) {
      return res.status(404).send("WiFi kh√¥ng t·ªìn t·∫°i");
    }

    res.status(200).send({ message: "‚úÖ X√≥a th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói server khi x√≥a WiFi:", err);
    res.status(500).send("L·ªói server");
  }
});